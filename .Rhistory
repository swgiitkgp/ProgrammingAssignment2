my_mean(c(4,5,10))
submit()
remanider(5)
remainder(5)
remainder(11,5)
remainder(divisor=11,num=5)
remainder(4,div=2)
args(remainder)
submit()
submit()
evaluate(sd,c(1.4,3.6.7.9.8.8))
evaluate(sd,c(1.4,3.6,7.9,8.8))
evaluate(function(x){x+1},6)
evaluate(function(x){x[1]},c(8,4,0))
evaluate(function(x){x[-1]},c(8,4,0))
?paste
paste("Programming","is","fun!")
submit()
telegram("bitch!")
submit()
mad_libs(place="Nagpur",noun="Dog",adjective="very")
submit()
'I'%p%'love'%p%'R!'
rm(list=ls())
setwd(""F:/R Directory"")
setwd("F:/R Directory)
_
)
?read.csv
as.posixCt
/as.posixCt
?as.posixCt
?as.POSIXct
source("plot1.R")
plot1()
source("plot1.R")
plot1()
?hist
source("plot1.R")
plot1()
source("plot1.R")
plot1()
source("plot1.R")
plot1()
x<-c(1,1,1,2,3,4,6,4,5,3,4,6)
hist(x)
source("plot1.R")
plot1()
source("plot1.R")
plot1()
source("plot1.R")
plot1()
source("plot1.R")
plot1()
x<-"2/2/2007"
as.Date(x)
as.Date(x,format="%d-%m-%Y")
y<-"2007/5/2"
as.Date(y)
y<-"2/5/2007"
as.Date(y,format="%d/%m/%Y")
source("plot1.R")
plot1()
source("plot1.R")
plot1()
install.packages ("jsonlite")
source("plot1.R")
plot1()
data <- fromJSON ("https://api.github.com/users/jtleek/repos")
source("plot1.R")
plot1()
source("plot1.R")
plot1()
source("plot2.R")
plot2()
?as.Day
source("plot2.R")
plot2()
source("plot2.R")
plot2()
source("plot2.R")
plot2()
source("plot2.R")
plot2()
source("plot2.R")
plot2()
source("plot2.R")
source("plot2.R")
plot2()
source("plot2.R")
plot2()
?plot
?plot
source("plot2.R")
plot2()
source("plot2.R")
plot2()
?par
source("plot3.R")
plot3()
source("plot3.R")
plot3()
plot3()
source("plot3.R")
plot3()
source("plot1.R")
plot1()
plot(my_data$Sub_metering_1~my_data$DateTime,type="l",ylab="Energy Sub Metering",xlab="")
par(new=TRUE)
plot(my_data$Sub_metering_2~my_data$DateTime,type="l",col="red",ylab="",xlab="")
par(new=TRUE)
plot(my_data$Sub_metering_3~my_data$DateTime,type="l",col="blue",ylab="",xlab="")
source("plot3.R")
source("plot3.R")
plot3()
plot3()
source("plot3.R")
plot3()
source("plot3.R")
plot3()
source("plot3.R")
plot3()
source("plot3.R")
plot3()
source("plot4.R")
plot4()
?plot
?legend
plot3()
source("plot3.R")
plot3()
source("plot3.R")
plot3()
source("plot3.R")
plot3()
plot3()
plot4()
plot3()
plot3()
plot3()
png(file="plot3.png")
plot3()
dev.off()
source("plot3.R")
plot3()
source("plot3.R")
plot3()
source("plot4.R")
plot4()
source("plot4.R")
plot4()
source("plot4.R")
plot4()
library(jsonlite)
view
install.packages(jsonLite)
install.packages(jsonlite)
library("jsonlite")
rm(list=ls())
clc
fieURL<-"https://data.baltimorecity.gov/api/views/aqgr-xx9h/rows.csv?accessType=DOWNLOAD"
download.file(fileURL,destfile="./data/cameras.csv", method="curl")
download.file(fieURL,destfile="./data/cameras.csv", method="curl")
list.files("./data")
download.file(fieURL,destfile="./data/cameras.csv", method="curl")
date<-date()
date
download.file(fieURL,destfile="./data/cameras.csv", method="curl")
getwd()
download.file(fieURL,destfile="./cameras.csv", method="curl")
fileurl<-"https://data.baltimorecity.gov/api/views/aqgr-xx9h/rows.csv?accessType=DOWNLOAD"
doenload.file(fileurl,destfile="./data/cameras.csv",method="curl")
download.file(fileurl,destfile="./data/cameras.csv",method="curl")
list.files()
install.packages("downloader")
fileurl
require(downloader)
?require
download(fileurl,"data/cameras.csv", mode="wb")
list.filers("./data")
list.files("./data")
cameradata<- read.table("./data/cameras.csv", sep=",", header=TRUE)
head(cameradata)
download(fileurl,"data/cameras.xlsx", mode="curl")
download(fileurl,"data/cameras1.xlsx", mode="curl")
download(fileurl,destfile="data/cameras1.xlsx", mode="curl")
download(fileurl,destfile="./data/cameras1.xlsx", mode="curl")
download(fileurl,destfile="./data/cameras1.xlsx", mode="wb")
camdata <- read.xlsx("./data/cameras1.xlsx",sheetIndex=1, header=TRUE)
install.packages("gdata")
require("gdata")
camdata <- read.xls("./data/cameras1.xlsx",sheetIndex=1, header=TRUE)
library(gdata)
camdata <- read.xls("./data/cameras1.xlsx",sheetIndex=1, header=TRUE)
install.packages("xlsx")
camdata <- read.xlsx("./data/cameras1.xlsx",sheetIndex=1, header=TRUE)
camdata <- read.xlsx("./data/cameras1.xlsx" ,sheetIndex=1, header=TRUE)
camdata <- read.xlsx("./data/cameras1.xlsx" ,sheetIndex=1, header=TRUE)
require("xlsx")
camdata <- read.xlsx("./data/cameras1.xlsx" ,sheetIndex=1, header=TRUE)
library("xlsx")
camdata <- read.xlsx("./data/cameras1.xlsx" ,sheetIndex=1, header=TRUE)
library(xlxs)
library(xlsx)
install.packages("xlsx")
library(xlsx)
camdata <- read.xlsx("./data/cameras1.xlsx" ,sheetIndex=1, header=TRUE)
install.packages("XLConnect")
library(XML)
install.packages("XML")
library(XML)
fileurl <- "http://www.w3schools.com/xml/simple.xml"
doc <- xmlTreeParse(fileurl,useInternal=TRUE)
install.packages("curl")
doc <- xmlTreeParse(fileurl,useInternal=TRUE)
install.packages("jsonlite")
library(jsonlite)
jsonData <- fromJSON("https://api.github.com/users/jtleek/repos")
jsonData <- fromJSON("https://api.github.com/users/jtleek/repos")
names(jsonData)
jsonData <- fromJSON("https://api.github.com/users/jtleek/repos")
setInternet2(use=TRUE)
doc <- xmlTreeParse(fileurl,useInternal=TRUE)
fileurl <- "http://www.w3schools.com/xml/simple.xml"
doc <- xmlTreeParse(fileurl,useInternal=TRUE)
clear
clc
rm(list=ls())
cat("/014")
library(MASS)
library(ISLR)
?Boston
install.packages("ISLR")
library(ISLR)
plot(medv~lstat,Boston)
fit1=lm(medv~lstat,data=Boston)
fit1
summary(fit1)
abline(fit1,col="red")
names(fit1)
confint(fit1)
predict(fit1,data.frame(lstat=c(5,10,15), interval="confidence"))
predict(fit1,data.frame(lstat=c(5,10,15), interval="confidence"))
fit2=lm(medv~lstat+age,data=Boston)
summary(fit2)
fit3=lm(medv~.,Boston)
summary(fit3)
par(mfrow=c(2,2))
plot(fit3)
fit5 <- lm(medv~lstat*age,Boston)
summary(fit5)
fit6 <- medv ~ lstat + I(lstat^2), Boston) ; summary(fit6)
fit6 <- lm(medv ~ lstat + I(lstat^2), Boston) ; summary(fit6)
attach(Boston)
par(mfrow=c(1,1))
plot(medv~lstat)
points(lstat, fitted(fit6), col="red", pch=20)
?points
?fitted
points(lstat, fitted(fit6), col="red", pch=20)
fit7 <- lm(medv~poly(lstat,4))
points(lstat, fitted(fit7), col="blue", pch=20)
plot(1:20,1:20,pch=1:20,cex=2)
fix(carSeats)
names(carSeats)
?contrasts
cat(/014)
rm(list=ls())
library(XML)
url <- "http://www.w3schools.com/xml/simple.xml"
doc <- xmlTreeParse(url, useInternal = TRUE)
doc <- xmlTreeParse(url, useInternal = TRUE)
file <- download.file("http://www.w3schools.com/xml/simple.xml")
file <- download.file("http://www.w3schools.com/xml/simple.xml", destfile = "myxml.xml")
?xmlTreeParse
doc <- xmlTreeParse(file, useInternal = TRUE)
doc <- xmlTreeParse("./myxml.xml", useInternal = TRUE)
rootnode <- xmlRoot(doc)
xmlName(rootnode)
names(rootnode)
download.file("https://api.github.com/users/jtleek/repos", destfile = "temp.json")
library(jsonlite)
jsonData <- fromJSON("temp.json")
names(jsonData)
names(jsonData$owner)
jsonData$owner$login
myjson <- toJSON(iris, pretty=TRUE)
cat(myjson)
download.file("https://erp.iitkgp.ernet.in/StudentPerformance/performanceview_guardian.jsp", destfile="erp.html")
doc <- htmlTreeParse("erp.html", useInternal = TRUE)
rootname <- htmlRoot(doc)
?html
library(HTML)
install.packages(HTML)
install.packages("HTML")
install.packages("RMySQL")
ucscDb <- dbConnect(MySQL(), user="genome", host="genome-mysql.cse.ucsc.edu")
library(RMySQL)
ucscDb <- dbConnect(MySQL(), user="genome", host="genome-mysql.cse.ucsc.edu")
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
library(rhdf5)
created = h5createFile("example.h5")
created
created = h5craeteGroup("example.h5", "foo")
created = h5createGroup("example.h5", "foo")
created = h5createGroup("example.h5", "baa")
created = h5createGroup("example.h5", "foo/foobaa")
h5ls("example.h5")
library(swirl)
swirl()
swirl()
install.packages("dplyr")
swirl()
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(X:size))
filter(cran, package=="swirl")
filter(cran, r_version="3.1.1", country == "US")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "IN" | country == "US")
filter(cran, size > 100500, r_os == "linux_gnu")
filter(cran, size > 100500, r_os == "linux-gnu")
isna(c(3,5,NA, 10))
is.na(c(3,5,NA, 10))
!is.na(c(3,5,NA, 10))
filter(cran, !is.na(r_version))
cran2 <- arrange(cran, size:ip_id)
cran2 <- select(size:ip_id)
cran2 <- select(cran, size:ip_id)
arrange(cran, ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran, country, desc(r_version), ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb/ 2^10)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
require(ISLR)
names(Smarket)
summary(Smarket)
pairs(Smarket, col-Smarket$Direction)
pairs(Smarket, col~Smarket$Direction)
pairs(Smarket, col=Smarket$Direction)
?pairs
pairs(Smarket, col=Smarket$Direction)
require(ISLR)
pairs(Smarket, Smarket$Direcction)
pairs(Smarket, col = Smarket$Direcction)
pairs(Smarket, col = Smarket$Direcction)
pairs(Smarket, col = Smarket$Direcction)
pairs(Smarket, Smarket$Direcction)
pairs(Smarket, col=Smarket$Direction)
glm.fit = glm(Direction~Lag1+Lag2+Lag3+Lag4+Lag5+Volume, data=Smarket, family = binomial)
summary(glm.fit)
glm.probs = predict(glm.fit, type = "response")
glm.probs(1:5)
glm.probs[1:5]
glm.pred = ifelse(glm.probs>0.5,"Up", "Down")
attach(Smarket)
table(glm.pred, Direction)
mean(glm.pred==Direction)
train = Year<2005
train <- Year<2005
glm.fit = glm(Direction~Lag1+Lag2+Lag3+Lag4+Lag5+Volume, data=Smarket, family = binomial, subset = train)
glm.probs<-predict(glm.fit, newdat=Smarket[!train], type = "response")
glm.probs<-predict(glm.fit, newdata=Smarket[!train], type = "response")
train
glm.probs<-predict(glm.fit, newdata=Smarket[!train,], type = "response")
glm.pred = ifelse(glm.probs>0.5,"Up", "Down")
mapply(rep, 1:4, 4:1)
m <- matrix(1:16, 4, 4)
m
solve(m)
m <- matrix(rnorm(16), 4, 4)
m
solve(m)
solve(m)
source("cachematrix.R")
getwd
getwd()
setwd("C:\SPB_Data\ProgrammingAssignment2")
setwd("C:/SPB_Data/ProgrammingAssignment2")
source("cachematrix.R")
cachematrix(m)
cacheSolve(m)
x <- matrix()
is.null(x)
x
is.na(x)
cacheSolve(m)
cacheSolve(m)
os.recursive(m)
is.recursive(m)
source("cachematrix.R")
cacheSolve(m)
source("cachematrix.R")
cacheSolve(m)
source("cachematrix.R")
source("cachematrix.R")
cacheSolve(m)
source("cachematrix.R")
cacheSolve(m)
source("cachematrix.R")
cacheSolve(m)
a <- makeCacheMatrix(matrix(rnorm(16),4, 4))
cacheSolve(a)
cacheSolve(a)
b <- makeCacheMatrix(matrix(rnorm(25),5, 5))
cacheSolve(b)
cacheSolve(a)
source("cachematrix.R")
cacheSolve(a)
b <- makeCacheMatrix(matrix(rnorm(25),5, 5))
cacheSolve(b)
cacheSolve(b)
a <- makeCacheMatrix( matrix(c(1,2,12,13), nrow = 2, ncol = 2) )
a
a$get()
cacheSolve(a)
cacheSolve(a)
source("cachematrix.R")
a <- makeCacheMatrix( matrix(c(1,2,12,13), nrow = 2, ncol = 2) )
cacheSolve(a)
cacheSolve(a)
cacheSolve(a)
a <- makeCacheMatrix( matrix(c(1,2,12,13), nrow = 2, ncol = 2) )
cacheSolve(a)
a <- makeCacheMatrix( matrix(c(1,2,12,13), nrow = 2, ncol = 2) )
cacheSolve(a)
cacheSolve(a)
source("cachematrix.R")
a <- makeCacheMatrix( matrix(c(1,2,12,13), nrow = 2, ncol = 2) )
cacheSolve(a)
cacheSolve(a)
source("cachematrix.R")
a <- makeCacheMatrix( matrix(c(1,2,12,13), nrow = 2, ncol = 2) )
cacheSolve(a)
cacheSolve(a)
source("cachematrix.R")
cacheSolve(a)
cacheSolve(a)
source("cachematrix.R")
cacheSolve(a)
cacheSolve(a)
source("cachematrix.R")
cacheSolve(a)
source("cachematrix.R")
cacheSolve(a)
source("cachematrix.R")
cacheSolve(a)
source("cachematrix1.R")
cacheSolve(a)
cacheSolve(a)
cacheSolve(a)
source("cachematrix.R")
cacheSolve(a)
source("cachematrix.R")
cacheSolve(a)
source("cachematrix.R")
cacheSolve(a)
cacheSolve(a)
cacheSolve(a)
source("cachematrix.R")
cacheSolve(a)
source("cachematrix.R")
cacheSolve(a)
cacheSolve(a)
library(datasets)
data(iris)
?iris
iris
f <- (rep("setosa", 50), rep("versicolor", 50), rep("virginica", 50))
?rep
rep("setosa", 50)
f <- c(rep("setosa", 50), rep("versicolor", 50), rep("virginica", 50))
f
tapply(iris$Sepal.Length, f, mean)
colMeans(iris)
apply(iris[,1:4], 2, mean)
apply(iris, 1, mean)
data(mtcars)
?mtcars
mtcars
sapply(split(mtcars$mpg, mtcars$cyl), mean)
mean(mtcars$mpg, mtcars$cyl)
tapply(mtcars$cyl, mtcars$mpg, mean)
sapply(split(mtcars$hp, mtcars$cyl), mean)
209.21429-82.63636
debug(ls)
ls
